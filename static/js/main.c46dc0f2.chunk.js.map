{"version":3,"sources":["TodoListItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListItem","props","className","type","defaultChecked","title","TodoList","todos","map","item","id","App","state","completed","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEaA,EAAe,SAACC,GACzB,OACI,oBAAIC,UAAU,OAAd,SACI,kCACI,uBAAOC,KAAK,WAAWC,gBAAgB,IACvC,+BAAOH,EAAMI,QACb,mBAAGH,UAAU,0BAAb,kCCNHI,EAAW,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACtB,OACI,6BACKA,EAAMC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,eAAgCA,GAAbA,EAAKC,UCuBxCC,E,4MAvBXC,MAAQ,CACJL,MAAO,CACH,CAACG,GAAI,EAAGL,MAAO,mIAA2BQ,WAAW,GACrD,CAACH,GAAI,EAAGL,MAAO,kFAAkBQ,WAAW,GAC5C,CAACH,GAAI,EAAGL,MAAO,0GAAsBQ,WAAW,GAChD,CAACH,GAAI,EAAGL,MAAO,0GAAsBQ,WAAW,K,4CAIxD,WACI,OACI,sBAAKX,UAAU,YAAf,UACI,2CACA,sBAAKA,UAAU,cAAf,UACI,uBAAOC,KAAK,SACZ,iDAEJ,cAAC,EAAD,CAAUI,MAAOO,KAAKF,MAAML,e,GAlB1BQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c46dc0f2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const TodoListItem = (props) => {\r\n    return (\r\n        <li className=\"todo\">\r\n            <label>\r\n                <input type=\"checkbox\" defaultChecked={false}/>\r\n                <span>{props.title}</span>\r\n                <i className=\"material-icons red-text\">delete_forever</i>\r\n            </label>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {TodoListItem} from \"./TodoListItem\";\r\nexport const TodoList = ({todos}) => {\r\n    return (\r\n        <ul>\r\n            {todos.map(item => <TodoListItem key={item.id} {...item}/>)}\r\n        </ul>\r\n    )\r\n}\r\n","import './App.css';\nimport React, {Component} from 'react'\nimport {TodoList} from \"./TodoList\";\n\nclass App extends Component {\n    state = {\n        todos: [\n            {id: 1, title: \"Выполнить первую задачу\", completed: false},\n            {id: 2, title: \"Погладить васю\", completed: false},\n            {id: 3, title: \"Рассказать историю\", completed: false},\n            {id: 4, title: \"Разгрузить коробки\", completed: false},\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1>ToDo List</h1>\n                <div className=\"input-field\">\n                    <input type=\"text\"/>\n                    <label>Todo name</label>\n                </div>\n                <TodoList todos={this.state.todos}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css';\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}