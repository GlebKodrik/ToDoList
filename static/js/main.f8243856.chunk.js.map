{"version":3,"sources":["TodoList.module.css","context.js","TodoListItem.js","TodoList.js","redux.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","TodoListItem","props","dispatch","useContext","cln","completed","push","className","join","type","checked","onChange","payload","id","title","s","dateDeleteWrap","date","onClick","TodoList","todos","map","item","appReducer","state","action","Date","now","filter","App","useReducer","JSON","parse","localStorage","getItem","useState","todoTitle","setTodoTitle","error","setError","useEffect","setItem","stringify","todo","reverse","Provider","value","event","target","Button","toLocaleString","year","month","day","hour","minute","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,eAAiB,mC,iJCCtBC,EAAUC,IAAMC,gB,OCEhBC,EAAe,SAACC,GAAW,IAC7BC,EAAYC,qBAAWN,GAAvBK,SACDE,EAAM,CAAC,QAIb,OAHIH,EAAMI,WACND,EAAIE,KAAK,aAGT,oBAAIC,UAAWH,EAAII,KAAK,KAAxB,SACI,kCACI,uBAAOC,KAAK,WACLC,QAAST,EAAMI,UACfM,SAAU,kBAAMT,EAAS,CAACO,KAAM,aAAcG,QAASX,EAAMY,QAEpE,+BAAOZ,EAAMa,QACb,sBAAKP,UAAWQ,IAAEC,eAAlB,UACI,+BAAOf,EAAMgB,OACb,mBAAGV,UAAU,0BACVW,QAAS,kBAAMhB,EAAS,CAACO,KAAM,aAAcG,QAASX,EAAMY,MAD/D,qCClBPM,EAAW,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACtB,OACI,6BACKA,EAAMC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,eAAgCA,GAAbA,EAAKT,U,QCuBxCU,EA5BI,SAACC,EAAOC,GACvB,OAAQA,EAAOhB,MACX,IAAK,MACD,MAAM,GAAN,mBACOe,GADP,CAEI,CACIX,GAAIa,KAAKC,MACTb,MAAOW,EAAOb,QAAQE,MACtBG,KAAMQ,EAAOb,QAAQK,KACrBZ,WAAW,KAGvB,IAAK,aACD,OAAOmB,EAAMH,KAAI,SAAAC,GAIb,OAHIA,EAAKT,KAAOY,EAAOb,UACnBU,EAAKjB,WAAaiB,EAAKjB,WAEpBiB,KAGf,IAAK,aACD,OAAOE,EAAMI,QAAO,SAAAN,GAAI,OAAIA,EAAKT,KAAOY,EAAOb,WAEnD,QACI,OAAOY,ICuCJK,EAzDH,WAAO,IAAD,EACYC,qBAAWP,EAAYQ,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IADhF,mBACPV,EADO,KACAtB,EADA,OAEoBiC,mBAAS,IAF7B,mBAEPC,EAFO,KAEIC,EAFJ,OAGYF,mBAAS,IAHrB,mBAGPG,EAHO,KAGAC,EAHA,KAIdC,qBAAU,WACNP,aAAaQ,QAAQ,QAASV,KAAKW,UAAUlB,MAC9C,CAACA,IACJ,IAAMmB,EAAO,YAAInB,GAAOoB,UAyBxB,OACI,cAAC/C,EAAQgD,SAAT,CAAkBC,MAAO,CACrB5C,YADJ,SAGI,sBAAKK,UAAU,YAAf,UACI,2CACA,gCACI,sBAAKA,UAAU,cAAf,UACI,uBAAOE,KAAK,OACLqC,MAAOV,EACPzB,SAAU,SAAAoC,GAAK,OAAIV,EAAaU,EAAMC,OAAOF,UAEpD,yEACCR,GAAS,qBAAK/B,UAAU,QAAf,SAAwB+B,OAEtC,cAACW,EAAA,EAAD,CAAQ/B,QA5BR,WACM,KAAdkB,GACAG,EAAS,IACTrC,EAAS,CACLO,KAAM,MACNG,QAAS,CAACE,MAAMsB,EAAUnB,MAfrB,IAAIS,MAQLwB,eAAe,KAPX,CACZC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,eAWRlB,EAAa,KAEbE,EAAS,kEAmByBiB,QAAQ,YAAYC,MAAM,UAApD,iEAIJ,cAAC,EAAD,CAAUrC,MAAOuB,UC7Cbe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8243856.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dateDeleteWrap\":\"TodoList_dateDeleteWrap__9iSfl\"};","import React from 'react'\r\n\r\nexport const Context = React.createContext();","import React, {useContext} from 'react'\nimport s from './TodoList.module.css'\nimport {Context} from './context';\n\nexport const TodoListItem = (props) => {\n    const {dispatch} = useContext(Context);\n    const cln = ['todo'];\n    if (props.completed) {\n        cln.push('completed');\n    }\n    return (\n        <li className={cln.join(' ')}>\n            <label>\n                <input type=\"checkbox\"\n                       checked={props.completed}\n                       onChange={() => dispatch({type: 'toggleTodo', payload: props.id})}\n                />\n                <span>{props.title}</span>\n                <div className={s.dateDeleteWrap}>\n                    <span>{props.date}</span>\n                    <i className=\"material-icons red-text\"\n                       onClick={() => dispatch({type: 'removeTodo', payload: props.id})}>delete_forever</i>\n            </div>\n        </label>\n</li>\n)\n}\n","import React from 'react'\nimport {TodoListItem} from \"./TodoListItem\";\nexport const TodoList = ({todos}) => {\n    return (\n        <ul>\n            {todos.map(item => <TodoListItem key={item.id} {...item}/>)}\n        </ul>\n    )\n}\n","const appReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'add': {\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: Date.now(),\r\n                    title: action.payload.title,\r\n                    date: action.payload.date,\r\n                    completed: false\r\n                }]\r\n        }\r\n        case 'toggleTodo': {\r\n            return state.map(item => {\r\n                if (item.id === action.payload) {\r\n                    item.completed = !item.completed\r\n                }\r\n                return item;\r\n            })\r\n        }\r\n        case 'removeTodo': {\r\n            return state.filter(item => item.id !== action.payload)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import React, {useEffect, useReducer, useState} from 'react'\nimport {TodoList} from \"./TodoList\";\nimport {Button} from '@material-ui/core';\nimport {Context} from './context';\nimport appReducer from \"./redux\";\n\nconst App = () => {\n    const [state, dispatch] = useReducer(appReducer, JSON.parse(localStorage.getItem('todos')) || []);\n    const [todoTitle, setTodoTitle] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(state));\n    }, [state])\n    const todo = [...state].reverse();\n    const getDate = () => {\n        const date = new Date();\n        const options = {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n        };\n        return date.toLocaleString(\"ru\", options);\n    }\n    const addTodo = () => {\n        if (todoTitle !== '') {\n            setError(\"\");\n            dispatch({\n                type: 'add',\n                payload: {title:todoTitle,date: getDate()}\n            });\n            setTodoTitle(\"\");\n        } else {\n            setError(\"Пустое поле\");\n        }\n    };\n\n    return (\n        <Context.Provider value={{\n            dispatch\n        }}>\n            <div className=\"container\">\n                <h1>ToDo List</h1>\n                <div>\n                    <div className=\"input-field\">\n                        <input type=\"text\"\n                               value={todoTitle}\n                               onChange={event => setTodoTitle(event.target.value)}\n                        />\n                        <label>Задача</label>\n                        {error && <div className=\"error\">{error}</div>}\n                    </div>\n                    <Button onClick={addTodo} variant=\"contained\" color=\"primary\">\n                        Добавить\n                    </Button>\n                </div>\n                <TodoList todos={todo}/>\n            </div>\n        </Context.Provider>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css';\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}